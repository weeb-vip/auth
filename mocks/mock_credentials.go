// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weeb-vip/auth/internal/services/credential (interfaces: Credential)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/weeb-vip/auth/internal/services/credential/models"
)

// MockCredential is a mock of Credential interface.
type MockCredential struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialMockRecorder
}

// MockCredentialMockRecorder is the mock recorder for MockCredential.
type MockCredentialMockRecorder struct {
	mock *MockCredential
}

// NewMockCredential creates a new mock instance.
func NewMockCredential(ctrl *gomock.Controller) *MockCredential {
	mock := &MockCredential{ctrl: ctrl}
	mock.recorder = &MockCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredential) EXPECT() *MockCredentialMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockCredential) GetCredentials(arg0 context.Context, arg1 string) (*models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialMockRecorder) GetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredential)(nil).GetCredentials), arg0, arg1)
}

// Register mocks base method.
func (m *MockCredential) Register(arg0 context.Context, arg1, arg2 string) (*models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCredentialMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCredential)(nil).Register), arg0, arg1, arg2)
}

// SignIn mocks base method.
func (m *MockCredential) SignIn(arg0 context.Context, arg1, arg2 string) (*models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockCredentialMockRecorder) SignIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockCredential)(nil).SignIn), arg0, arg1, arg2)
}
