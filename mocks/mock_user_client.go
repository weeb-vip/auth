// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weeb-vip/auth/internal/services/user_client (interfaces: UserClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_user_client.go -package=mocks github.com/weeb-vip/auth/internal/services/user_client UserClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserClientInterface is a mock of UserClientInterface interface.
type MockUserClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientInterfaceMockRecorder
	isgomock struct{}
}

// MockUserClientInterfaceMockRecorder is the mock recorder for MockUserClientInterface.
type MockUserClientInterfaceMockRecorder struct {
	mock *MockUserClientInterface
}

// NewMockUserClientInterface creates a new mock instance.
func NewMockUserClientInterface(ctrl *gomock.Controller) *MockUserClientInterface {
	mock := &MockUserClientInterface{ctrl: ctrl}
	mock.recorder = &MockUserClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClientInterface) EXPECT() *MockUserClientInterfaceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserClientInterface) AddUser(ctx context.Context, id, username, firstname, lastname, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, id, username, firstname, lastname, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserClientInterfaceMockRecorder) AddUser(ctx, id, username, firstname, lastname, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserClientInterface)(nil).AddUser), ctx, id, username, firstname, lastname, language)
}
